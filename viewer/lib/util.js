// Generated by CoffeeScript 1.8.0
(function() {
  var AWS, DOC, createTable, createTableAndWaitUntilReady, deleteTableAndWaitUntilRemoved, dynamoDB, isReady, nconf, notExists, putItem, waitUntil;

  AWS = require('aws-sdk');

  DOC = require('dynamodb-doc');

  nconf = require('./mynconf');

  AWS.config.credentials = new AWS.Credentials({
    accessKeyId: nconf.get('AWS_ACCESS_KEY'),
    secretAccessKey: nconf.get('AWS_SECRET_ACCESS_KEY')
  });

  dynamoDB = new DOC.DynamoDB(new AWS.DynamoDB({
    endpoint: nconf.get('DYNAMODB_ENDPOINT'),
    region: nconf.get('DYNAMODB_REGION')
  }));

  isReady = function(tableName, callback) {
    return dynamoDB.describeTable({
      TableName: tableName
    }, function(error, data) {
      if (!error) {
        return callback(data.Table.TableStatus === 'ACTIVE');
      } else {
        return console.error(error.message);
      }
    });
  };

  notExists = function(tableName, callback) {
    return dynamoDB.describeTable({
      TableName: tableName
    }, function(error, data) {
      if (error && error.code === 'ResourceNotFoundException') {
        return callback(true);
      } else {
        return callback(false);
      }
    });
  };

  waitUntil = function(args, cond, ready) {
    var repeat;
    repeat = function() {
      return waitUntil(args, cond, ready);
    };
    return cond(args, function(conditionMet) {
      if (conditionMet) {
        console.log("Done");
        return ready(args);
      } else {
        console.log("Waiting for operation to complete...");
        return setTimeout(repeat, 200);
      }
    });
  };

  createTable = function(tableParams, deleteIfExists, err, done) {
    if (deleteIfExists) {
      return deleteTableAndWaitUntilRemoved(tableParams.TableName, function(error) {
        return console.error(error);
      }, function() {
        return createTableAndWaitUntilReady(tableParams, err, done);
      });
    } else {
      return createTableAndWaitUntilReady(tableParams, err, done);
    }
  };

  createTableAndWaitUntilReady = function(tableParams, err, done) {
    console.log("creating table " + tableParams.TableName + " on " + (nconf.get('DYNAMODB_ENDPOINT')));
    return dynamoDB.createTable(tableParams, function(error, data) {
      if (!error) {
        return waitUntil(tableParams.TableName, isReady, done);
      } else {
        if (error.code === 'ResourceInUseException') {
          console.info("Table " + tableParams.TableName + " already exists");
          return waitUntil(tableParams.TableName, isReady, done);
        } else {
          console.error(error.message);
          if (err) {
            return err(error.message);
          }
        }
      }
    });
  };

  deleteTableAndWaitUntilRemoved = function(tableName, err, done) {
    console.log("Deleting table " + tableName);
    return dynamoDB.deleteTable({
      TableName: tableName
    }, function(error, data) {
      if (!error) {
        return waitUntil(tableName, notExists, done);
      } else {
        if (error.code === 'ResourceNotFoundException') {
          return waitUntil(tableName, notExists, done);
        } else {
          if (err) {
            return err(error);
          }
        }
      }
    });
  };

  putItem = function(tableName, item, err, done) {
    var params;
    params = {
      TableName: tableName,
      Item: item
    };
    return dynamoDB.putItem(params, function(error, data) {
      if (!error) {
        if (done) {
          return done(item);
        }
      } else {
        if (err) {
          return err(error);
        }
      }
    });
  };

  module.exports.createTable = createTable;

  module.exports.putItem = putItem;

  module.exports.dynamoDB = dynamoDB;

}).call(this);
